"""
The purpose of this program is to perform the XOR sort on two lists
of 100 numbers between 1 and 200.  

The lists will be generated by using the irand function from project 5.
The binary search written for project 6 will be modified as necessary to
sort the values that are only in one list or the other.

The lists will be combined and a method will iterate over the combined
list, checking to see if the value at position [i] is equal to the value
at position [i + 1].  If there is a match, both will be popped from the 
final XOR list.

"""

import random

class XOR:

	def __init__(self):
		a = self.irand(100, 200)
		b = self.irand(100, 200)

		print('\nA:\n')
		print(a)
		print('\nB:\n')
		print(b)

		A = self.insSort(a)
		B = self.insSort(b)

		print('\nA (sorted):\n')
		print(A)
		print('\nB (sorted):\n')
		print(B)

		#Combine and insert sort the lists
		X = self.insSort(A + B)
		X = self.xorSort(X)

		print('\nXOR:\n')
		print(X)

	#Sort the list using an insertion sort
	def insSort(self, nums):

		#Compare the positions in the array
		for i in range(1, len(nums)):

			#The value to be compared
			currentvalue = nums[i]

			#Assign the iterator to a new variable to avoid index errors
			position = i

			#Position must be greater than zero so the index can't be -1
			while position > 0 and nums[position - 1] > currentvalue:

				#Assign the value to a new position
				nums[position] = nums[position - 1]
				position = position - 1

			#Assign the value to a new position
			nums[position] = currentvalue

		#Return the sorted array
		return nums

	#The irand function from project 5
	def irand(self, n, m):
		b = list(range(n))
		b = random.sample(range(m), n)
		return b

	#This method sorts into a single XOR list
	def xorSort(self, nums):

		#A new array to push to in order to avoid index errors
		result = nums

		for i in range(1, len(nums) - 1):

			#Iterate over the list to find matches
			if nums[i - 1] == nums[i]:

				#Remove both instances of the matching number
				result = [j for j in result if j != nums[i]]

		return result

x = XOR()